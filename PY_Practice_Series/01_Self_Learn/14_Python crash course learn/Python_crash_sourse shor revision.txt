____________CHAPET 2 VARIABLES____________
1. String methods 
title()  -- use for making the capatilized string
upper()
lower()

Striping white space method :-
rstrip()  
- it works from RHS means remove white space from right side

lstrip()
- it works from LHS means remove white space from left side

strip()
- it works from LHS and RHS means remove white space from left and right side at once 

Removing Prefixes :-
removeprefix()
- its takes the part of the string variable as a parameter and remove that one

Avoiding Syntax Errors with Strings
"One of Python's strengths is its diverse community."  --- this is the correct way
'One of Python's strengths is its diverse community.'   --- this will throw the error


2. Numbers
a. float
- When we divide any two numbers, even if they are integers that result in a whole number, we’ll always get a float:
- if we do any operation with float number and integer result come into float


b. Underscores in Numbers
eg:- 14_000_000_000
- When we print a number that was defined using underscores, Python prints only the digits
- This feature works for both integers and floats.



c. Multiple Assignment :-
eg:- x, y, z = 0, 0, 0
-  this technique most often when initializing a set of numbers at sigle line.


d. Constants
- A constant is a variable whose value stays the same throughout the life of a program.
- all capital letters to indicate a variable should be treated as a constant and never be changed : 
- eg:- MAX_CONNECTIONS = 5000


e. Comments 
- eg: # Say hello to everyone.


f. The Zen of Python
- means writing good Python code
- Simple is better than complex.
- Complex is better than complicated.
- Readability counts.
- There should be one-- and preferably only one --obvious way to do it.
- Now is better than never.


____________CHAPET 3 LIST____________
What Is a List?
A list is a collection of items in a particular order. 

a. Accessing Elements in a List
- we can access list in Python by the position, or index
- eg:- bicycles = ['trek', 'cannondale', 'redline', 'specialized']
      print(bicycles[0])
      print(bicycles[-1])   // negetive indexing
- Index Positions Start at 0, Not 1 


b. Using Individual Values from a List
message = f"My first bicycle was a {bicycles[0].title()}."
print(message)


c. Modifying, Adding, and Removing Elements
	i. Modifying Elements in a List
	- list_name[index_num] = 'ducati'

	ii. Adding Elements to a List
	- list_name.append('ducati')
	- item always added to RHS
	
	iii. Inserting Elements into a Lis
	- motorcycles.insert(0, 'ducati')


	iv. Removing Elements From a List
	- del motorcycles[0]
	- permanently deleted

	v. Removing an Item Using the pop() Metho
	- popped_motorcycle = motorcycles.pop()
	- temporarly deleted we can reuse it
	- pop() method remove value from last


	vi. Popping Items from Any Position in a List
	- first_owned = motorcycles.pop(0)


	vii. Removing an Item by Value
	- eg:- motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']
	      print(motorcycles)
	      motorcycles.remove('ducati')
	- remove method also remove the element from the list temporarly we can reuse it by storing into variable
	- The remove() method deletes only the first occurrence of the value that we specify. 
	

d. Organizing a List method
	i. Sorting a List Permanently with the sort() Method
	- sort() method changes the order of the list permanently.
	- short() method change the order accordingly to alphabitacally (eg:- a,b,c,d,e.. so on)
	- we can also sort this list in reverse-alphabetical order by passing the argument short(reverse=True)

	ii. Sorting a List Temporarily with the sorted() Function
	- we will do it by this syntax: sorted(cars)
	- it dosent change the actual list it make it own reference list

	iii. Printing a List in Reverse Order
	- cars.reverse()
	- The reverse() method changes the order of a list permanently,
	- we can revert to the original order anytime by applying reverse()

	iv. Finding the Length of a List
	-  find the length of a list by using the len() function.
	- eg:- len(cars)



e. Avoiding Index Errors When Working with Lists
- think always list index start from 0
- always check if our list is empty



____________CHAPET 4 Working with LIST____________

a. Looping Through an Entire List :-
-eg:- magicians = ['alice', 'david', 'carolina']
	for magician in magicians:
	    print(magician)

	i. A Closer Look at Looping
	- for magician in magicians: >> this line take each magician as magician into loop at one time
	- print(magician)  >> it print each magician in each iletration

	ii. Doing More Work Within a for Loop
	- magicians = ['alice', 'david', 'carolina']
	  for magician in magicians:
	      print(f"{magician.title()}, that was a great trick!")
	- we can print each name with some message

	iii. Doing Something After a for Loop
	- magicians = ['alice', 'david', 'carolina']
	  for magician in magicians:
	     print(f"{magician.title()}, that was a great trick!")
                print(f"I can't wait to see your next trick, {magician.title()}.\n")
            print("Thank you, everyone. That was a great magic show!")
	- we can give some common message to all after the loop

b. Avoiding Indentation Errors

	i. Forgetting to Indent
	- Always indent the line after the for statement in a loop.

	ii. Forgetting to Indent Additional Lines
	- This is a logical error
	- 

	iii. Indenting Unnecessarily
	- Python informs we about the unexpected indent:

	iv. Indenting Unnecessarily After the Loop
	- This is another logical error, similar to the one in “Forgetting to Indent Additional Lines”

	v. Forgetting the Colon
	- you’ll get a syntax error because Python doesn’t know exactly what you’re trying to do.


c. Making Numerical Lists

	i. Using the range() Function
	- eg: for value in range(1, 5):
		print(value)

	ii. Using range() to Make a List of Number
	- numbers = list(range(1, 6))
	  print(numbers)
	
	iii. Simple Statistics with a List of Numbers
	- >>> digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
	  >>> min(digits)
		0
	  >>> max(digits)
		9
	  >>> sum(digits)
		45

	iv. List Comprehensions
	- # Example list comprehension without range
	    numbers = [1, 2, 3, 4, 5]
	    squared_numbers = [x ** 2 for x in numbers if x % 2 == 0]
	- # Example list comprehension with range
	    squared_numbers = [x ** 2 for x in range(1, 6) if x % 2 == 0]

d. Working with Part of a List
	i. Slicing a List :-  [note: it slice exclusively]
	- players = ['charles', 'martina', 'michael', 'florence', 'eli']
	- print(players[0:3])  // slice from 0 index to index 2
	- print(players[:4])   // select and slice upt0 index 3
	- print(players[2:])  // select and slice before index 1
	- print(players[-3:])  // negetive slicing from -3 to 0

	ii. Looping Through a Slice
	- players = ['charles', 'martina', 'michael', 'florence', 'eli']
	     for player in players[:3]:
		 print(player.title())

	iii. Copying a List 
	- friend_foods = my_foods[:]
	- copied list changes dosen't leads to change into original one



e. Tuples
-  Python refers to values that cannot change as immutable, and an immutable list is called a tuple.

	i. Defining a Tuple
	- We can access tuple just like a list.
	- we cannot change tuples value
	- eg:- dimensions = (200, 50)
		print(dimensions[0])

	ii. Looping Through All Values in a Tuple
	- We can loop tuples just like the list.
	- eg:- for dimension in dimensions:
		print(dimension)

	iii. Writing Over a Tuple
	- we can make the tuple value very nice in looking by giving \n.


____________CHAPET 5 IF STATEMENT____________
a. Conditional Test :- 
	i. A Simple Example
	- eg:- cars = ['audi', 'bmw', 'subaru', 'toyota']
	for car in cars:
	  1 if car == 'bmw':
		print(car.upper())
	  else:
		print(car.title())

	ii, Conditional Tests
	- Checking for Equality.
	  - >>> car = 'bmw'
	   >>> car == 'bmw'
	        True

	- Ignoring Case When Checking for Equality
	  - eg:- >>> car = 'Audi'
	        >>> car.lower() == 'audi'
	
	- Checking for Inequality (!) 
	  - requested_topping = 'mushrooms'
	    if requested_topping != 'anchovies':
	    print("Hold the anchovies!")

	- Numerical Comparisons 
	  - eg:- >>> age = 18
	        >>> age == 18
	        True
	  - we can use (==, !=, =>, <=)


	iii. Checking Multiple Conditions
	  - Using `and` to Check Multiple Conditions
	    - age_0 >= 21 and age_1 >= 21
	      False

	  - Using `or` to Check Multiple Conditions
	    - >>> age_0 >= 21 or age_1 >= 21
		True

	
	iv. Checking Whether a Value Is `in` a List
	   - eg:- requested_toppings = ['mushrooms', 'onions', 'pineapple']
		>>> 'mushrooms' in requested_toppings
		True

	  - Checking Whether a Value Is Not in a List
	    - banned_users = ['andrew', 'carolina', 'david']
	      user = 'marie'
	      if Statements 77
  	      if user not in banned_users:
	      print(f"{user.title()}, you can post a response if you wish.")
             

	v. Boolean Expressions:-
	   - game_active = True
	   - can_edit = False



b. if Statements :- 
	
	i. Simple if Statements
	- eg:- if conditional_test:
		do something

	ii. if-else Statements
	- eg:- if conditional_test:
		do something
	      else:
		do this thing

	iii. The if-elif-else Chain
	- eg:- if conditional_test:
		do something
	      elif conditional_test:
		or do this thing
	      else:
		or do this thing

	iv. Using Multiple elif Blocks
	- Same as The if-elif-else Chain just increases the elif condition

	v. Omitting the else Block
	- Python does not require an else block at the end of an if-elif chain.

	vi. Testing Multiple Conditions
	- we can test list element by using if-elif conditions


c. Using if Statements with Lists

	i. Checking for Special Items
	- requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']
	for requested_topping in requested_toppings:
	  if requested_topping == 'green peppers':
 		print(f"Adding {requested_topping}.")
	  else:
		print("\nFinished making your pizza!")


	ii. Checking That a List Is Not Empty
	- requested_toppings = []
	  if requested_toppings:
 	    for requested_topping in requested_toppings:
 		print(f"Adding {requested_topping}.")
  		print("\nFinished making your pizza!")
	 else:
	          print("Your list is empty?")


	iii. Using Multiple Lists
	- we can use multiple list with condition


____________CHAPET 6 DICTIONARIES____________

- Dictionary are not really hard undersand it just by indexes.
- in list there are default indexes from 0 to n position
- in Dictionary there is our custom indexes.
-  key-value pairs.

a. A Simple Dictionary
	- alien_0 = {'color': 'green', 'points': 5}
	  print(alien_0['color'])
	  print(alien_0['points'])

b. Working with Dictionaries
- alien_0 = {'color': 'green', 'points': 5}
- key-value pairs. whre color is key and poimts is value

	i. Accessing Values in a Dictionary
	- alien_0 = {'color': 'green'}
	  print(alien_0['color'])

	ii. Adding New Key-Value Pairs
	- alien_0 = {'color': 'green', 'points': 5}
	  alien_0['x_position'] = 0
             alien_0['y_position'] = 25
             print(alien_0)

	iii. Starting with an Empty Dictionary
	- we can add key and value at same time into Dictionary
	- alien_0 = {}
	  alien_0['color'] = 'green'
	  alien_0['points'] = 5

	iv. Modifying Values in a Dictionary
	  - alien_0 = {'color': 'green'}
	    alien_0['color'] = 'yellow'

	v. Removing Key-Value Pairs [ del ]
	  - Access the index to remove key value pair
	  - del alien_0['points']

	vi. A Dictionary of Similar Objects
	  - You can also use a dictionary to store similar kind of information about many objects.
	  - favorite_languages = {
	    'jen': 'python',
	    'sarah': 'c',
	    'edward': 'rust',
               'phil': 'python',
               }

	vii. Using get() Method to Access Values
	  - Using this method we can access value and if not then can show message
	  - point_value = alien_0.get('points', 'No point value assigned.')
	  - you’ll get the corresponding value
	  - If it doesn’t, you get the default value (we get a clean message instead of an error:)


c. Looping Through a Dictionary

	i. Looping Through All Key-Value Pairs
	  - for key, value in user_0.items():
	    print(f"\nKey: {key}")
	     print(f"Value: {value}")

	  - eg:- favorite_languages = {'jen': 'python', 'sarah': 'c', 'edward': 'rust', 'phil': 'python',}
	        for name, language in favorite_languages.items():
	        print(f"{name.title()}'s favorite language is {language.title()}.")
	  - we can access both key and value for in each iteration in loop


	ii. Looping Through All the Keys in a Dictionary
	  - for name in favorite_languages.keys():
	        print(name.title())


	iii. Looping Through a Dictionary’s Keys in a Particular Order
	  - short() / shorted()
	  - for name in sorted(favorite_languages.keys()):
	    print(f"{name.title()}, thank you for taking the poll.")


	iv. Looping Through All Values in a Dictionary
	  - for language in favorite_languages.values():
	    print(language.title())
	  - When you wrap set() around a collection of values that contains duplicate items will be remove.
	  - for language in set(favorite_languages.values())

d. Nesting
	
	i. A List of Dictionaries
	- alien_0 = {'color': 'green', 'points': 5}
	  alien_1 = {'color': 'yellow', 'points': 10}
	  alien_2 = {'color': 'red', 'points': 15}
	  aliens = [alien_0, alien_1, alien_2]
	  for alien in aliens:
	  print(alien)
	- aliens.append(new_alien) // for adding


	ii. A List in a Dictionary
	- pizza = {
		'crust': 'thick',
		'toppings': ['mushrooms', 'extra cheese'],
		}
	- Accesing: - for topping in pizza['toppings']:
			print(f"\t{topping}")
	- distanary indexes values are in list so use [] to access them.
	- dictainory values are in disctainory so use {} to access them


	iii. A Dictionary in a Dictionary
	- List have .keys() and values() method as same dictainory have items()
	- we use .items() method when we want to excess both key and value of Dictainary 
	- users = { 'aeinstein': { 'first': 'albert', 'last': 'einstein', 'location': 'princeton'}, 'mcurie': { 'first': 'marie', 'last': 'curie', 'location': 'paris', },}
	- index can easily access by  - print(f"\nUsername: {username}")
	- values can easily access by - full_name = f"{user_info['first']} {user_info['last']}"
	- as i say before dictionary values can be access by [] this braces



____________CHAPET 7 USER INPUT AND WHILE LOOPS____________

a. How the input() Function Works
- paue the program while taking input
- store the inputed value into variable
- do work for it

	i. Writing Clear Prompts
	- use clear and open ended sentences for taking input

	ii. Using int() to Accept Numerical Input
	- by default input method take string so use int method for taking integer

	iii. The Modulo Operator
	- modulo operator (%), which divides one number by another number and returns the remainder:
	- eg:-  4 % 3 = 1


b. Introducing while Loops
	i. Using flag
	ii. The while Loop in Action
	iii. Letting the User Choose When to Quit
	iv. Using break to Exit a Loop
	v. Using continue in a Loop
	vi. Avoiding Infinite Loops
	  -        x = 1
		while x <= 5:
		print(x)
		x += 1   // if this value ommited then its go infinite


c. Using a while Loop with Lists and Dictionaries
	
	i. Moving Items from One List to Another
	- unconfirmed_users = ['alice', 'brian', 'candace']
	  confirmed_users = []
	- while unconfirmed_users:
		current_user = unconfirmed_users.pop()
		confirmed_users.append(current_user)


	ii. Removing All Instances of Specific Values from a List
	- pets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']
	  while 'cat' in pets:
	      pets.remove('cat')
	  print(pets)

	iii. Filling a Dictionary with User Input
	- set flag
	- teake input 
	- modify flag when needed


____________CHAPET 8 FUNCTIONS____________

a. Defining a Function
- def greet_user():
      print("Hello!")
greet_user()













